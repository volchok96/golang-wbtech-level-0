// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cache/cache.go

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	memcache "github.com/bradfitz/gomemcache/memcache"
	gomock "github.com/golang/mock/gomock"
)

// MockMemCacheClient is a mock of MemCacheClient interface.
type MockMemCacheClient struct {
	ctrl     *gomock.Controller
	recorder *MockMemCacheClientMockRecorder
}

// MockMemCacheClientMockRecorder is the mock recorder for MockMemCacheClient.
type MockMemCacheClientMockRecorder struct {
	mock *MockMemCacheClient
}

// NewMockMemCacheClient creates a new mock instance.
func NewMockMemCacheClient(ctrl *gomock.Controller) *MockMemCacheClient {
	mock := &MockMemCacheClient{ctrl: ctrl}
	mock.recorder = &MockMemCacheClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemCacheClient) EXPECT() *MockMemCacheClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMemCacheClient) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemCacheClientMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemCacheClient)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockMemCacheClient) Get(key string) (*memcache.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*memcache.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemCacheClientMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemCacheClient)(nil).Get), key)
}

// Set mocks base method.
func (m *MockMemCacheClient) Set(item *memcache.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMemCacheClientMockRecorder) Set(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemCacheClient)(nil).Set), item)
}
